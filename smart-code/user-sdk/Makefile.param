#!/usr/bin/make -f

export WORK_DIR=$(shell pwd)

#------------------------- Select the Board type ------------------------------
export FIRMWARE_TYPE = $(CONFIG_FIRMWARE_TYPE)

#------------------------- Select platform types ------------------------------
#PLATFORM ?= _LINUX_VMWARE_
export PLATFORM = $(CONFIG_PLATFORM)

#------------------------- Select flash types ------------------------------
export FLASH = $(CONFIG_FLASH)

#------------------------- Select 38 or Single ------------------------------
export BOARD_LAYER=$(CONFIG_BOARD_LAYER)

#------------------------- Select A cross-compiler ---------------------------
export CROSS_COMPILER = $(CONFIG_CROSS_COMPILER)

#------------------------- Select compilation types ------------------
export MAKE_TYPE = $(CONFIG_MAKE_TYPE)

export MPP_PATH = $(CONFIG_MPP_PATH)

export PRODUCT_HISI_TYPE = $(CONFIG_HISI_TYPE)

MAKE_TARGET_NFS_DIR = $(CONFIG_NFS_LIB_PRE)/$(CONFIG_HISI_TYPE)/

CFLAGS += -D_MAX_CHANNEL_NUM_=$(CONFIG_MAX_CH)

ifeq ($(PLATFORM), _HISI_BOARD_)
#CFLAGS += -march=armv7-a -mcpu=cortex-a9 
	export CROSS:=$(CROSS_COMPILER)
	export PRODUCT_LAYER=_WS_MULTI_
	ifeq ($(FLASH), _SPI_)
	export PRODUCT_FLASH_TYPE = _SPI_
	endif
	ifeq ($(FLASH), _NAND_)
	export PRODUCT_FLASH_TYPE = _NAND_
	endif
	ifeq ($(FIRMWARE_TYPE), _WS_FAMILY_NVR_)
	CFLAGS += -march=armv7-a -mcpu=cortex-a9
	export PRODUCT_TYPE = _NVR_
	export PRODUCT_ATTRIBYTES = _WS_FAMILY_
	export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_f_nvr/

	export DEVICE_HISI_TYPE=_UNKNOW_
	export DEVICE_TYPE=_NVR_
	endif
	ifeq ($(FIRMWARE_TYPE), _WS_FAMILY_SDI_DVR_)
	CFLAGS += -march=armv7-a -mcpu=cortex-a9
	export PRODUCT_TYPE = _SDI_DVR_
	export PRODUCT_ATTRIBYTES = _WS_FAMILY_
	export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_f_sdi_dvr/

	export DEVICE_HISI_TYPE=_UNKNOW_
	export DEVICE_TYPE=_SDI_DVR_
	endif
	ifeq ($(FIRMWARE_TYPE), _WS_RPO_SDI_DVR_)
	CFLAGS += -march=armv7-a -mcpu=cortex-a9
        export PRODUCT_TYPE = _SDI_DVR_
        export PRODUCT_ATTRIBYTES = _WS_PRO_
        export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_p_sdi_dvr/

	exprot DEVICE_HISI_TYPE=_UNKNOW_
	export DEVICE_TYPE=_SDI_DVR_
        endif
	ifeq ($(FIRMWARE_TYPE),_WS_FAMILY_HVR_)
	CFLAGS += -march=armv7-a -mcpu=cortex-a9
	export PRODUCT_TYPE = _HVR_
	export PRODUCT_ATTRIBYTES = _WS_FAMILY_
	export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_f_hvr/

	export DEVICE_HISI_TYPE=_UNKNOW_
	export DEVICE_TYPE=_HVR_
	endif
	ifeq ($(FIRMWARE_TYPE), _WS_FAMILY_IPC_V100_)
	export TARGET_INSTALL:=/opt/hisi-linux-nptl/arm-hisiv100-linux/target/armv7a_vfp_v3d16/usr/lib/
	export CROSS_COMPILE_PATH=/opt/hisi-linux-nptl/arm-hisiv100-linux/target
	export PRODUCT_TYPE = _HISI_V100_
	export PRODUCT_ATTRIBYTES = _WS_FAMILY_

	MAKE_TARGET_NFS_DIR=$(CONFIG_NFS_LIB_PRE)/
	ifeq ($(BOARD_LAYER), _SINGLE_)
	export PRODUCT_LAYER= _WS_SINGLE_
	export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_f_ipc_v100_single/

	export DEVICE_TYPE=_WS_IPC_
	endif
	ifeq ($(BOARD_LAYER), _MULTI_)
	export PRODUCT_LAYER= _WS_MULTI_
	export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_f_ipc_v100/

	export DEVICE_TYPE=_WS_IPC_
	endif	
	export DEVICE_HISI_TYPE=_HI3518A_
	endif
	ifeq ($(FIRMWARE_TYPE), _WS_FAMILY_IPC_V300_)
	export CROSS:=arm-hisiv300-linux-
	export TARGET_INSTALL:=/opt/hisi-linux/x86-arm/arm-hisiv300-linux/target/usr/lib/
	export CROSS_COMPILE_PATH=/opt/hisi-linux/x86-arm/arm-hisiv300-linux/target	
	export PRODUCT_TYPE = _HISI_V300_
	export PRODUCT_ATTRIBYTES = _WS_FAMILY_

	MAKE_TARGET_NFS_DIR=$(CONFIG_NFS_LIB_PRE)/
	ifeq ($(BOARD_LAYER), _MULTI_)
	export PRODUCT_LAYER= _WS_MULTI_
	export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_f_ipc_v300/

	export DEVICE_TYPE=_WS_IPC_
	endif
	ifeq ($(BOARD_LAYER), _SINGLE_)
	export PRODUCT_LAYER= _WS_SINGLE_
	export COPY_NFS_DIR:=$(MAKE_TARGET_NFS_DIR)ws_f_ipc_v300_single/

	export DEVICE_TYPE=_WS_IPC_
	endif
	ifeq ($(PRODUCT_HISI_TYPE), hi3516a)
	export DEVICE_HISI_TYPE=_HI3516A_
	endif
	ifeq ($(PRODUCT_HISI_TYPE), hi3518ev200)
	export DEVICE_HISI_TYPE=_HI3518EV200_
	endif
	endif
endif

#*****3521a update****** add by khs 2018.2.28# 
ifeq ($(PRODUCT_HISI_TYPE), hi3521a)
CFLAGS += -D_KERNEL_VER_3_10_
endif

ifeq ($(CONFIG_FIRMARE_VERSION), WS_HI3518E_V200_V001)
CFLAGS += -DHI3518EV200_V001
endif

ifeq ($(CONFIG_FIRMARE_RECORD), ENABLE_RECORD)
CFLAGS += -DRECORD_ENABLE
endif

export CC:=$(CROSS)g++
export CXX:=$(CROSS)gcc
export AR:=$(CROSS)ar
export LD:=$(CROSS)ld

export STRIP:=Y

#CFLAGS += -D_VERSION_  	#开启这个宏表示为专业版 add by khs 2017.5.16
#CFLAGS += -D_SHOW_XML_CFG_TOOL_
#CFLAGS += -D_P2P_SMART_
#CFLAGS += -D_SUPPORT_WIFI_
CFLAGS += -D_WS_P2P_DEVICE_
CFLAGS += -D_APP_LIST_MANAGE_
#CFLAGS += -D_SUPPORT_ONE_CHANNEL_
#CFLAGS += -D_NVR_MAIN_STREAM_
#CFLAGS += -D_V_3_1_5_ZGF_FORCE_TO_QUIT_
#CFLAGS += -D_V3_1_3_LJX_PRO_PRODUCTION_TEST_
#CFLAGS += -D_LOCK_SCREEN_
#CFLAGS +=  -D_SUPPORT_TIME_TYPE_AND_STANDARD_
#CFLAGS +=  -D_SUPPORT_ALARM_ENC_
#CFLAGS +=  -D_SUPPORT_LINK_CLOUD_CRADLE_
#CFLAGS +=  -D_SUPPORT_LINK_REC_

#CFLAGS  +=  -D_SUPPORT_POLL_LIVE_
#CFLAGS +=  -D_SUPPORT_PRO_BACKUP_
#CFLAGS +=  -D_PTZ_FUNC_
#CFLAGS +=   -D_SUPPORT_MANUAL_SNAP_
CFLAGS += -D_SUPPORT_WAKEUP_DISK_
CFLAGS += -D_SUPPORT_VIDEO_ADJUST_
#CFLAGS += -D_SUPPORT_CAP_VPSS_DATA_
ifeq ($(MAKE_TYPE), _MAKE_DEBUG_)
CFLAGS += -D_SUPPORT_SYSLOG_
CFLAGS += -D_SUPPORT_PRINT_NOTICE_
CFLAGS += -D_SUPPORT_PRINT_WARNING_
CFLAGS += -D_SUPPORT_PRINT_ERROR_
CFLAGS += -D_SUPPORT_PRINT_DEBUG_
CFLAGS += -D_SUPPORT_ASSERT_
else
CFLAGS += -D_NOT_SUPPORT_ALL_PRINT_
endif


CFLAGS += -D$(PRODUCT_LAYER)
CFLAGS += -D$(PRODUCT_TYPE)
CFLAGS += -D$(PRODUCT_ATTRIBYTES)
CFLAGS += -D$(PLATFORM)
CFLAGS += -D$(PRODUCT_FLASH_TYPE)
CFLAGS += -D$(DEVICE_TYPE)
CFLAGS += -D$(DEVICE_HISI_TYPE)

CFLAGS += -D_DIAGNOSE_LOCK_
#-------------------  -Wall's sub options ----------------------
CFLAGS += -Wchar-subscripts #char variable in bounds，such as char a = 128;
CFLAGS += -Wcomment #当'/*'出现在 '/* ... */'注释中，或者'\'出现在注释后面，会导致接下来的语句失效..
CFLAGS += -Wformat #检查printf和scanf等格式化输入输出函数的格式字符串与参数类型的匹配情况..
CFLAGS += -Wimplicit #声明函数却未指明函数返回类型时、在函数声明前调用该函数..
CFLAGS += -Wmissing-braces #数组变量的初始化表达式没有'充分'用括号{}括起时..
CFLAGS += -Wparentheses #优先级或者if else的缩进容易引起歧义的时候报警告..
CFLAGS += -Wsequence-point #执行顺序有歧义导致异常，例如i = i++、	a[i] = b[i++]、a[i++] = i之类..
CFLAGS += -Wswitch #没有处理default
CFLAGS += -Wunused #定义了未使用的变量、函数、标记..
#CFLAGS += -Wunused-parameter #函数定义有未使用的形参..
CFLAGS += -Wuninitialized #未初始化..

#-------------------  Others options (except -Wall's options) ----------------------
CFLAGS += -Wfloat-equal #浮点值是否出现在相等比较..
CFLAGS += -Wshadow #当局部变量遮蔽(shadow)了参数、全局变量或者是其他局部变量时..
CFLAGS += -Wcast-qual #当去掉修饰源Target的限定词(如const)时，给出警告..
CFLAGS += -Wcast-align #从对齐系数小的地址(如char*)转换为对齐系数大的地址(如int*)转换时给出警告..
CFLAGS += -Wsign-compare #在有符号数和无符号数进行值比较时，有符号数可能在比较之前被转换为无符号数而导致结果错误..
CFLAGS += -Waggregate-return #函数返回一个聚合类型，如结构体、联合或者数组..
CFLAGS += -Wmultichar #当我们写下如此代码时:char c = 'peter', 使用该选项会给出警告..
#----- 杀伤力太大了，编译器无法知道你是否有意写出这样的代码，例如 if ((char)a > 256)，但是很多时候我们确实是有意识的写出一些不想执行的代码，例如通过判断变量是否等于一个宏定义来做处理..
#CFLAGS += -Wunreachable-code #这个选项是一个检查冗余代码或疏忽代码好办法。它一旦检查到你的代码中有不可达的代码，就会发出警告。这些代码往往会存在潜在的危机..

#------------------- （注意，g++不需要下面项） ――――――――――――――――――――――
#CFLAGS += -Wbad-function-cast #函数返回类型不匹配..
#CFLAGS += -Wconvertion #由于原型定义而引起的定点和浮点数之间的隐式转换(强制转换)或者由有符号数和无符号数之间隐式转换转换引起的警告..

CFLAGS += -g -Os -fno-rtti -fomit-frame-pointer
CFLAGS += -fPIC


